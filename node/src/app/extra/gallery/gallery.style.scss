@import "../../../../node_modules/magnific-popup/dist/magnific-popup";
@import "../../scss/variables";
@import "../../../../node_modules/bootstrap/scss/_variables";
@import "../../../../node_modules/bootstrap/scss/mixins";


@mixin bs3-make-row($gutter: $grid-gutter-width) {
  @include clearfix();
  margin-left:  ($gutter / -2);
  margin-right: ($gutter / -2);
}

@mixin bs3-make-col-span($size, $columns: $grid-columns) {
    width: percentage($size / $columns);
}

@mixin bs3-make-col-offset($size, $columns: $grid-columns) {
  margin-left: percentage($size / $columns);
}

@mixin bs3-make-col-push($size, $columns: $grid-columns) {
  left: if($size > 0, percentage($size / $columns), auto);
}

@mixin bs3-make-col-pull($size, $columns: $grid-columns) {
  right: if($size > 0, percentage($size / $columns), auto);
}

@mixin bs3-make-col-modifier($type, $size, $columns) {
  // Work around the lack of dynamic mixin @include support (https://github.com/sass/sass/issues/626)
  @if $type == push {
    @include bs3-make-col-push($size, $columns);
  } @else if $type == pull {
    @include bs3-make-col-pull($size, $columns);
  } @else if $type == offset {
    @include bs3-make-col-offset($size, $columns);
  }
}

@mixin bs3-make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left: ($gutter / 2);
    padding-right: ($gutter / 2);
  }
  @each $breakpoint in map-keys($breakpoints) {
    @for $i from 1 through $columns {
      .bs3-col-#{$breakpoint}-#{$i} {
        @extend %grid-column;
      }
    }
    @include media-breakpoint-up($breakpoint) {
      // Work around cross-media @extend (https://github.com/sass/sass/issues/1050)
      %grid-column-float-#{$breakpoint} {
        float: left;
      }
      @for $i from 1 through $columns {
        .bs3-col-#{$breakpoint}-#{$i} {
          @extend %grid-column-float-#{$breakpoint};
          @include bs3-make-col-span($i, $columns);
        }
      }
      @each $modifier in (pull, push, offset) {
        @for $i from 0 through $columns {
          .bs3-col-#{$breakpoint}-#{$modifier}-#{$i} {
            @include bs3-make-col-modifier($modifier, $i, $columns)
          }
        }
      }
    }
  }
}

@if $enable-grid-classes {
  .bs3-row {
    @include bs3-make-row();
  }
}


// Columns
//
// Common styles for small and large grid columns

@if $enable-grid-classes {
  @include bs3-make-grid-columns();
}

/***********************************/
/**          Post Links           **/
/***********************************/

.post-links{
  margin-bottom: 0;
  font-size: $font-size-sm;
  padding-left: 0;
  @include clearfix();
  > li{
    float: left;
    list-style: none;

    + li{
      &:before{
        color: #999;
        content: "\25cf";
        padding: 0 8px;
      }
    }
    > a{
      text-decoration: none;
      color: $text-muted;
      &:hover{
        color: $text-muted;
      }
    }
  }

  &.no-separator > li + li{
    margin-left: 12px;
    &:before{
      content: normal;
    }
  }
}

/***********************************/
/**            Gallery            **/
/***********************************/

.gallery{
  .img-thumbnail{

    figcaption {
      margin: 0.8571rem 0.5714rem 0.8571rem 0.5714rem;
    }

    a{
      display: inline-block;
      overflow: hidden;
      max-width: 100%;
      > img{
        transition: transform .15s ease;
        max-width: 100%;
      }
    }
    &:hover{
      a > img{
        transform: scale(1.1, 1.1);
      }
    }
  }

  .post-links > li > a{
    display: inline;
  }

  > div{
    max-width: 100%;
  }
}



